# Enterprise Real Estate Platform
# Microservices Architecture with Docker Compose
version: '3.8'

networks:
  property237-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  media-data:
  static-data:

services:
  # ==============================
  # Infrastructure Services
  # ==============================

  # Primary Database (PostgreSQL with PostGIS)
  postgres:
    image: postgis/postgis:15-3.4
    container_name: property237-postgres
    environment:
      POSTGRES_DB: property237
      POSTGRES_USER: property237_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - property237-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U property237_user -d property237"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Cache & Session Store (Redis)
  redis:
    image: redis:7.2-alpine
    container_name: property237-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_123}
    volumes:
      - redis-data:/data
    networks:
      - property237-network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Search Engine (OpenSearch)
  opensearch:
    image: opensearchproject/opensearch:2.11.1
    container_name: property237-search
    environment:
      - cluster.name=property237-cluster
      - node.name=property237-search
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
      - "DISABLE_SECURITY_PLUGIN=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - ./opensearch-data:/usr/share/opensearch/data
    networks:
      - property237-network
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Message Queue (optional - for async tasks)
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: property237-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: property237
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-rabbitmq_secure_123}
    volumes:
      - ./rabbitmq-data:/var/lib/rabbitmq
    networks:
      - property237-network
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # ==============================
  # Core Application Services
  # ==============================

  # Main API Service (Django)
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile.enterprise
      target: ${BUILD_TARGET:-development}
    container_name: property237-api
    environment:
      # Django settings
      DEBUG: ${DEBUG:-True}
      SECRET_KEY: ${SECRET_KEY:-django-insecure-change-in-production}

      # Database
      DB_ENGINE: postgresql
      DB_NAME: property237
      DB_USER: property237_user
      DB_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
      DB_HOST: postgres
      DB_PORT: 5432

      # Cache
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_123}@redis:6379/0

      # Security
      ALLOWED_HOSTS: localhost,127.0.0.1,api,${DOMAIN:-property237.local}
      CORS_ALLOWED_ORIGINS: http://localhost:3000,https://${DOMAIN:-property237.local}

      # JWT
      JWT_SIGNING_KEY: ${JWT_SIGNING_KEY:-jwt-secret-key-change-in-production}
      JWT_ACCESS_TOKEN_MINUTES: ${JWT_ACCESS_TOKEN_MINUTES:-15}
      JWT_REFRESH_TOKEN_DAYS: ${JWT_REFRESH_TOKEN_DAYS:-7}

      # File Storage (S3 or local)
      AWS_STORAGE_BUCKET_NAME: ${AWS_STORAGE_BUCKET_NAME}
      AWS_S3_REGION_NAME: ${AWS_S3_REGION_NAME:-ca-central-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}

      # Search
      OPENSEARCH_HOST: opensearch
      OPENSEARCH_PORT: 9200

      # Email (production)
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      EMAIL_USE_TLS: ${EMAIL_USE_TLS:-True}

    volumes:
      - ./backend:/app
      - media-data:/app/media
      - static-data:/app/staticfiles
    networks:
      - property237-network
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        python manage.py runserver 0.0.0.0:8000
      "

  # Celery Worker (async tasks)
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.enterprise
      target: ${BUILD_TARGET:-development}
    container_name: property237-worker
    environment:
      # Same as API service
      DEBUG: ${DEBUG:-True}
      SECRET_KEY: ${SECRET_KEY:-django-insecure-change-in-production}
      DB_ENGINE: postgresql
      DB_NAME: property237
      DB_USER: property237_user
      DB_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
      DB_HOST: postgres
      DB_PORT: 5432
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_123}@redis:6379/0
      # Celery settings
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis_secure_123}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis_secure_123}@redis:6379/1
    volumes:
      - ./backend:/app
      - media-data:/app/media
    networks:
      - property237-network
    depends_on:
      - postgres
      - redis
      - api
    restart: unless-stopped
    command: celery -A config worker --loglevel=info --concurrency=2

  # Celery Beat (periodic tasks)
  scheduler:
    build:
      context: ./backend
      dockerfile: Dockerfile.enterprise
      target: ${BUILD_TARGET:-development}
    container_name: property237-scheduler
    environment:
      # Same as worker
      DEBUG: ${DEBUG:-True}
      SECRET_KEY: ${SECRET_KEY:-django-insecure-change-in-production}
      DB_ENGINE: postgresql
      DB_NAME: property237
      DB_USER: property237_user
      DB_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
      DB_HOST: postgres
      DB_PORT: 5432
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_123}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis_secure_123}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis_secure_123}@redis:6379/1
    volumes:
      - ./backend:/app
    networks:
      - property237-network
    depends_on:
      - postgres
      - redis
      - api
    restart: unless-stopped
    command: celery -A config beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler

  # ==============================
  # Frontend Services
  # ==============================

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: property237-frontend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_PUBLIC_API_URL: http://localhost:8000/api/v1
      NEXT_PUBLIC_WS_URL: ws://localhost:8000/ws
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-nextauth-secret-change-in-production}
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - property237-network
    ports:
      - "3000:3000"
    depends_on:
      - api
    restart: unless-stopped

  # ==============================
  # Reverse Proxy & Load Balancer
  # ==============================

  # Nginx (production reverse proxy)
  nginx:
    image: nginx:1.25-alpine
    container_name: property237-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - static-data:/app/staticfiles:ro
      - media-data:/app/media:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - property237-network
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - frontend
    restart: unless-stopped
    profiles:
      - production

  # ==============================
  # Monitoring & Observability
  # ==============================

  # Prometheus (metrics)
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: property237-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus-data:/prometheus
    networks:
      - property237-network
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana (dashboards)
  grafana:
    image: grafana/grafana:10.2.0
    container_name: property237-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_SECURITY_ADMIN_USER: admin
    volumes:
      - ./grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - property237-network
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring